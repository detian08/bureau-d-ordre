#-*- coding:utf-8 -*-
import json
from datetime import date, datetime, timedelta
import calendar
from babel.dates import format_datetime, format_date
from openerp import models, api, _, fields
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT as DF

class crm_dashboard_activity(models.Model):
    _name = "crm.dashboard.activity"

    @api.one
    def _kanban_dashboard(self):
        self.kanban_dashboard = json.dumps(self.get_journal_dashboard_datas())


    @api.one
    def _dashboard_activity_email(self):
	self.dashboard_activity_email = json.dumps(self.get_dashboard_activity_email())
    @api.one
    def _dashboard_activity_appel(self):
	self.dashboard_opportunity_appel = json.dumps(self.get_dashboard_activity_appel())
    @api.one
    def _dashboard_activity_reunion(self):
	self.dashboard_activity_reunion = json.dumps(self.get_dashboard_activity_reunion())

    name = fields.Char(string='Name') 
    type_dash = fields.Selection([('email', "email"),('appel', "appel"),('reunion', "reunion")])
    kanban_dashboard = fields.Text(compute='_kanban_dashboard')

    dashboard_activity_email = fields.Text(compute='_dashboard_activity_email')
    dashboard_activity_appel = fields.Text(compute='_dashboard_activity_appel')
    dashboard_activity_reunion = fields.Text(compute='_dashboard_activity_reunion')

    show_on_dashboard = fields.Boolean(string='Show journal on dashboard', help="Whether this journal should be displayed on the dashboard or not", default=True)


    @api.multi
    def get_journal_dashboard_datas(self):
	print "u call get_journal_dashboard_datas"


    ##Nombre d'email envoyé par activité
    @api.multi
    def get_dashboard_activity_email(self):
	data = []
	list_prod = []
	list_opportunity = []
 	if self.type_dash == 'email' :
		print "....email."
		##Liste des produits à suivre
		product_ids = self.env['product.template'].search([('a_suivre','=',True)])
		for product in product_ids :
			list_prod.append(product.id)

		opportunity_ids = self.env['crm.lead'].search([('product_id','in',tuple(list_prod))])
		for opportunity in opportunity_ids :
			list_opportunity.append(opportunity.id)

		self.env.cr.execute("SELECT COUNT(id), mail_message_id FROM mail_mail WHERE state =%s AND opportunity_ids in %s GROUP BY mail_message_id",("sent",tuple(list_opportunity)))

		res = self.env.cr.dictfetchall()
		for i in res:
			mail_message_id = i['mail_message_id']
			nb_mail = i.get('count')
			print "nb_mail",nb_mail
			self.env.cr.execute("SELECT subject FROM mail_message WHERE id =%s",(mail_message_id,))
			result = self.env.cr.dictfetchall()
			for s in result:
				activity = s['subject']

				data.append({'label':activity , 'value':nb_mail,'id':self.id})
		print '....',data
		return [{'values': data, 'area': True,'id': self.id}]

    ##Nombre d'appel envoyé par activité
    @api.multi
    def get_dashboard_activity_appel(self):
	data = []
	list_prod = []
	list_opportunity = []
 	if self.type_dash == 'appel' :
		print "....appel."
		##Liste des produits à suivre
		product_ids = self.env['product.template'].search([('a_suivre','=',True)])
		for product in product_ids :
			list_prod.append(product.id)

		opportunity_ids = self.env['crm.lead'].search([('product_id','in',tuple(list_prod))])
		for opportunity in opportunity_ids :
			list_opportunity.append(opportunity.id)

		self.env.cr.execute("SELECT COUNT(id), mail_message_id FROM mail_mail WHERE state =%s AND opportunity_ids in %s GROUP BY mail_message_id",("sent",tuple(list_opportunity)))
		res = self.env.cr.dictfetchall()
		for i in res:
			mail_message_id = i['mail_message_id']
			nb_mail = i.get('count')
			self.env.cr.execute("SELECT subject FROM mail_message WHERE id =%s",(mail_message_id,))
			result = self.env.cr.dictfetchall()
			for s in result:
				activity = s['subject']

				data.append({'label':activity , 'value':nb_mail,'id':self.id})
		return [{'values': data, 'area': True,'id': self.id}]

    ##Nombre de reunion par activité
    @api.multi
    def get_dashboard_activity_reunion(self):
	data = []
	list_prod = []
	list_opportunity = []
 	if self.type_dash == 'reunion' :
		print "....reunion."
		##Liste des produits à suivre
		product_ids = self.env['product.template'].search([('a_suivre','=',True)])
		for product in product_ids :
			list_prod.append(product.id)
		opportunity_ids = self.env['crm.lead'].search([('product_id','in',tuple(list_prod))])
		for opportunity in opportunity_ids :
			list_opportunity.append(opportunity.id)

		self.env.cr.execute("SELECT COUNT(id), mail_message_id FROM mail_mail WHERE state =%s AND opportunity_ids in %s GROUP BY mail_message_id",("sent",tuple(list_opportunity)))
		res = self.env.cr.dictfetchall()
		for i in res:
			mail_message_id = i['mail_message_id']
			nb_mail = i.get('count')
			self.env.cr.execute("SELECT subject FROM mail_message WHERE id =%s",(mail_message_id,))
			result = self.env.cr.dictfetchall()
			for s in result:
				activity = s['subject']

				data.append({'label':activity , 'value':nb_mail,'id':self.id})
		return [{'values': data, 'area': True,'id': self.id}]



