# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2009 Tiny SPRL (<http://tiny.be>). All Rights Reserved
#    $Id$
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
import JasperDataParser
from openerp.jasper_reports import jasper_report
from openerp import pooler
import time
from datetime import datetime
import base64
import os
# import netsvc
from openerp.osv import fields, osv
from openerp.tools.translate import _


class jasper_client(JasperDataParser.JasperDataParser):
    def __init__(self, cr, uid, ids, data, context):
        super(jasper_client, self).__init__(cr, uid, ids, data, context)

    def generate_data_source(self, cr, uid, ids, data, context):
        return 'records'

    def generate_parameters(self, cr, uid, ids, data, context):
        return {}

    def generate_properties(self, cr, uid, ids, data, context):
        return {}

    def generate_records(self, cr, uid, ids, data, context):
        print"********************000"

        pool = pooler.get_pool(cr.dbname)
        result = []
        if 'form' in data:
            # from_date = data['form']['date_aujourd']
            dateAuj = time.strftime('%d-%m-%Y %H:%M')
            product_id = data['form']['product_id'][1]
            print '****product_id', product_id
            cash_ids = pool.get('product.template').search(cr, uid, [('name', '=', product_id)])
            print'******cash_ids', cash_ids
            cash_objs = pool.get('product.template').browse(cr, uid, cash_ids)
            print'******cash_objs', cash_objs



            # prod_ids = pool.get('product.product').search(cr, uid, [('product_id', '=', product_id)])
            # print'..................prod_ids', prod_ids
            reg_ids = pool.get('crm.claim').search(cr, uid, [('product_id', '=', cash_objs.id)])
            print"********************111", reg_ids

            reg_objs = pool.get('crm.claim').browse(cr, uid, reg_ids)
            print"********************222", reg_objs

            if reg_objs:
                print"********************333"

                for reg in reg_objs:
                    if reg.stage_id['name'] == "New":
                        state = "Nouveau"
                        print"*********", state
                    elif reg.stage_id['name'] == "In Progress":
                        state = "En cours"
                        print"*********", state
                    elif reg.stage_id['name'] == "Settled":
                        state = "Résolue"
                        print"*********", state
                    elif reg.stage_id['name'] == "Rejected":
                        state = "Refusé"
                        print"*********", state

                    data = {
                        'objet': reg.name,
                        'partner': reg.partner_id["name"],
                        'date_reclamation': reg.date,
                        'echeance': reg.date_deadline,
                        'responsable': reg.user_id["name"],
                        'state':state,
                        'product_id': reg.product_id["name"],
                        'dateAuj': dateAuj,

                    }
                    print"...................data****.", data

                    result.append(data)
                    print'***result***', result

            else:
                data = {
                    'objet': '',
                    'partner':'',
                    'date_reclamation':'',
                    'echeance':'',
                    'responsable': '',
                    'product_id': '',
                    'dateAuj': dateAuj,

                }
                result.append(data)
        return result


jasper_report.report_jasper('report.jasper_claim_print', 'crm.claim', parser=jasper_client, )
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:c
